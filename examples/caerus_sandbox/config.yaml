# This file can update the JupyterHub Helm chart's default configuration values.
#
# For reference see the configuration reference and default values, but make
# sure to refer to the Helm chart version of interest to you!
#
# Introduction to YAML:     https://www.youtube.com/watch?v=cdLNKUoMc6c
# Chart config reference:   https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html
# Chart default values:     https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/HEAD/jupyterhub/values.yaml
# Available chart versions: https://jupyterhub.github.io/helm-chart/
#
cull:
  adminUsers: true
  concurrency: 10
  enabled: true
  every: 600
  maxAge: 0
  removeNamedServers: false
  timeout: 3600
  users: false
custom: {}
debug:
  enabled: false
fullnameOverride: ""
global:
  safeToShowValues: false
hub:
  allowNamedServers: false
  annotations: {}
  args: []
  baseUrl: /
  command: []
  concurrentSpawnLimit: 64
  config:
    GitHubOAuthenticator:
      client_id: b69c1ad0d24929612d1f
      client_secret: f7503501811cf1b54c30a35e68d46f197a0b252f
      oauth_callback_url: https://sandbox.caerus-gateway.com/hub/oauth_callback
    JupyterHub:
      admin_access: true
      allowed_organizations:
      - caeruscommodities-risk
      authenticator_class: github
      scope:
      - read:org
  consecutiveFailureLimit: 5
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsGroup: 1000
    runAsUser: 1000
  db:
    pvc:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      selector: {}
      storage: 1Gi
    type: sqlite-pvc
  deploymentStrategy:
    type: Recreate
  extraConfig: {}
  extraContainers: []
  extraEnv: {}
  extraFiles: {}
  extraPodSpec: {}
  extraVolumeMounts: []
  extraVolumes: []
  image:
    name: jupyterhub/k8s-hub
    pullSecrets: []
    tag: 2.0.0
  initContainers: []
  labels: {}
  lifecycle: {}
  livenessProbe:
    enabled: true
    failureThreshold: 30
    initialDelaySeconds: 300
    periodSeconds: 10
    timeoutSeconds: 3
  loadRoles: {}
  networkPolicy:
    allowedIngressPorts: []
    egress: []
    egressAllowRules:
      cloudMetadataServer: true
      dnsPortsPrivateIPs: true
      nonPrivateIPs: true
      privateIPs: true
    enabled: true
    ingress: []
    interNamespaceAccessLabels: ignore
  nodeSelector: {}
  pdb:
    enabled: false
    minAvailable: 1
  podSecurityContext:
    fsGroup: 1000
  readinessProbe:
    enabled: true
    failureThreshold: 1000
    initialDelaySeconds: 0
    periodSeconds: 2
    timeoutSeconds: 1
  resources: {}
  service:
    annotations: {}
    extraPorts: []
    ports: {}
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
  services: {}
  templatePaths: []
  templateVars: {}
  tolerations: []
imagePullSecret:
  automaticReferenceInjection: true
  create: false
imagePullSecrets: []
ingress:
  annotations: {}
  enabled: false
  hosts: []
  pathType: Prefix
  tls: []
prePuller:
  annotations: {}
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsGroup: 65534
    runAsUser: 65534
  continuous:
    enabled: true
  extraImages: {}
  extraTolerations: []
  hook:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      runAsGroup: 65534
      runAsUser: 65534
    enabled: true
    image:
      name: jupyterhub/k8s-image-awaiter
      pullSecrets: []
      tag: 2.0.0
    nodeSelector: {}
    podSchedulingWaitDuration: 10
    pullOnlyOnChanges: true
    resources: {}
    serviceAccount:
      annotations: {}
      create: true
    tolerations: []
  labels: {}
  pause:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      runAsGroup: 65534
      runAsUser: 65534
    image:
      name: k8s.gcr.io/pause
      pullSecrets: []
      tag: "3.8"
  pullProfileListImages: true
  resources: {}
proxy:
  annotations: {}
  chp:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      runAsGroup: 65534
      runAsUser: 65534
    extraCommandLineFlags: []
    extraEnv: {}
    extraPodSpec: {}
    image:
      name: jupyterhub/configurable-http-proxy
      pullSecrets: []
      tag: 4.5.3
    livenessProbe:
      enabled: true
      failureThreshold: 30
      initialDelaySeconds: 60
      periodSeconds: 10
      timeoutSeconds: 3
    networkPolicy:
      allowedIngressPorts:
      - http
      - https
      egress: []
      egressAllowRules:
        cloudMetadataServer: true
        dnsPortsPrivateIPs: true
        nonPrivateIPs: true
        privateIPs: true
      enabled: true
      ingress: []
      interNamespaceAccessLabels: ignore
    nodeSelector: {}
    pdb:
      enabled: false
      minAvailable: 1
    readinessProbe:
      enabled: true
      failureThreshold: 1000
      initialDelaySeconds: 0
      periodSeconds: 2
      timeoutSeconds: 1
    resources: {}
    tolerations: []
  deploymentStrategy:
    type: Recreate
  https:
    enabled: true
    hosts:
    - sandbox.caerus-gateway.com
    letsencrypt:
      acmeServer: https://acme-v02.api.letsencrypt.org/directory
      contactEmail: kmorgan@caeruscommodities.com
    manual: {}
    secret:
      crt: tls.crt
      key: tls.key
    type: letsencrypt
  labels: {}
  secretSync:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      runAsGroup: 65534
      runAsUser: 65534
    image:
      name: jupyterhub/k8s-secret-sync
      pullSecrets: []
      tag: 2.0.0
    resources: {}
  service:
    annotations: {}
    disableHttpPort: false
    extraPorts: []
    labels: {}
    loadBalancerSourceRanges: []
    nodePorts: {}
    type: LoadBalancer
  traefik:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      runAsGroup: 65534
      runAsUser: 65534
    extraDynamicConfig: {}
    extraEnv: {}
    extraInitContainers: []
    extraPodSpec: {}
    extraPorts: []
    extraStaticConfig: {}
    extraVolumeMounts: []
    extraVolumes: []
    hsts:
      includeSubdomains: false
      maxAge: 15724800
      preload: false
    image:
      name: traefik
      pullSecrets: []
      tag: v2.8.4
    labels: {}
    networkPolicy:
      allowedIngressPorts:
      - http
      - https
      egress: []
      egressAllowRules:
        cloudMetadataServer: true
        dnsPortsPrivateIPs: true
        nonPrivateIPs: true
        privateIPs: true
      enabled: true
      ingress: []
      interNamespaceAccessLabels: ignore
    nodeSelector: {}
    pdb:
      enabled: false
      minAvailable: 1
    resources: {}
    serviceAccount:
      annotations: {}
      create: true
    tolerations: []
rbac:
  create: true
scheduling:
  corePods:
    nodeAffinity:
      matchNodePurpose: prefer
    tolerations:
    - effect: NoSchedule
      key: hub.jupyter.org/dedicated
      operator: Equal
      value: core
    - effect: NoSchedule
      key: hub.jupyter.org_dedicated
      operator: Equal
      value: core
  podPriority:
    defaultPriority: 0
    enabled: false
    globalDefault: false
    imagePullerPriority: -5
    userPlaceholderPriority: -10
  userPlaceholder:
    annotations: {}
    containerSecurityContext:
      allowPrivilegeEscalation: false
      runAsGroup: 65534
      runAsUser: 65534
    enabled: true
    image:
      name: k8s.gcr.io/pause
      pullSecrets: []
      tag: "3.8"
    labels: {}
    replicas: 0
    resources: {}
  userPods:
    nodeAffinity:
      matchNodePurpose: prefer
    tolerations:
    - effect: NoSchedule
      key: hub.jupyter.org/dedicated
      operator: Equal
      value: user
    - effect: NoSchedule
      key: hub.jupyter.org_dedicated
      operator: Equal
      value: user
  userScheduler:
    annotations: {}
    containerSecurityContext:
      allowPrivilegeEscalation: false
      runAsGroup: 65534
      runAsUser: 65534
    enabled: true
    extraPodSpec: {}
    image:
      name: k8s.gcr.io/kube-scheduler
      pullSecrets: []
      tag: v1.23.10
    labels: {}
    logLevel: 4
    nodeSelector: {}
    pdb:
      enabled: true
      maxUnavailable: 1
    pluginConfig:
    - args:
        scoringStrategy:
          resources:
          - name: cpu
            weight: 1
          - name: memory
            weight: 1
          type: MostAllocated
      name: NodeResourcesFit
    plugins:
      score:
        disabled:
        - name: NodeResourcesBalancedAllocation
        - name: NodeAffinity
        - name: InterPodAffinity
        - name: NodeResourcesFit
        - name: ImageLocality
        enabled:
        - name: NodeAffinity
          weight: 14631
        - name: InterPodAffinity
          weight: 1331
        - name: NodeResourcesFit
          weight: 121
        - name: ImageLocality
          weight: 11
    replicas: 2
    resources: {}
    serviceAccount:
      annotations: {}
      create: true
    tolerations: []
singleuser:
  allowPrivilegeEscalation: false
  cloudMetadata:
    blockWithIptables: true
    ip: 169.254.169.254
  cmd: jupyterhub-singleuser
  cpu: {}
  events: true
  extraAnnotations: {}
  extraContainers: []
  extraEnv: {}
  extraFiles: {}
  extraLabels:
    hub.jupyter.org/network-access-hub: "true"
  extraNodeAffinity:
    preferred: []
    required: []
  extraPodAffinity:
    preferred: []
    required: []
  extraPodAntiAffinity:
    preferred: []
    required: []
  extraPodConfig: {}
  extraResource:
    guarantees: {}
    limits: {}
  extraTolerations: []
  fsGid: 100
  image:
    name: kmorgancaerus/datascience-notebook
    pullPolicy: Always
    pullSecrets: []
    tag: 0.0.7
  initContainers: []
  lifecycleHooks: {}
  memory:
    guarantee: 1G
  networkPolicy:
    allowedIngressPorts: []
    egress: []
    egressAllowRules:
      cloudMetadataServer: false
      dnsPortsPrivateIPs: true
      nonPrivateIPs: true
      privateIPs: false
    enabled: true
    ingress: []
    interNamespaceAccessLabels: ignore
  networkTools:
    image:
      name: jupyterhub/k8s-network-tools
      pullSecrets: []
      tag: 2.0.0
    resources: {}
  nodeSelector: {}
  profileList: []
  startTimeout: 300
  storage:
    capacity: 10Gi
    dynamic:
      pvcNameTemplate: claim-{username}{servername}
      storageAccessModes:
      - ReadWriteOnce
      volumeNameTemplate: volume-{username}{servername}
    extraLabels: {}
    extraVolumeMounts: []
    extraVolumes: []
    homeMountPath: /home/jovyan
    static:
      subPath: '{username}'
    type: dynamic
  uid: 1000
